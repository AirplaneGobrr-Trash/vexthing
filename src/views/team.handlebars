<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{teamNumber}} - Team</title>
    <link rel="stylesheet" href="/static/style/main.css">
</head>

<body>
    <h1 id="teamName">{{teamNumber}}</h1>
    <hr>
    <input id="lookup" type="text" style="width: 500px;"
        value="https://www.youtube.com/results?search_query={teamNumber}+high+stakes+vex+vrc">
    <button id="open">Open</button> <a>(Use <b><em>{teamNumber}</em></b> to refer to the team number in the URL)</a>
    <hr>

    <img id="image" alt="Robot" style="height: 500px;" />
    <hr>
    <input type="file" id="updatePicture" /><button id="upload">Upload</button>
    <div id="progressContainer">
        <progress id="progressBar" value="0" max="100"></progress>
        <span id="progressText">0%</span>
    </div>

    <hr>

    <form id="skills">

        <div id="data"></div>

        <hr>

        <input type="submit" id="save" value="Save"><input type="submit" id="cancel" value="Cancel">
    </form>

    <h1 class="collapsible active">Teams Matches:</h1>
    <div class="content">
        <div id="teamMatches" class="matchHolder">
        </div>
    </div>

    <script defer>
        const splitURL = window.location.pathname.split("/")
        const teamID = splitURL.pop()
        const eventID = splitURL.pop()
        console.log(teamID)

        let dataLayout = {}

        let dataElms = {}

        const skillsElm = document.getElementById("skills")
        const dataElm = document.getElementById("data")
        const imageElm = document.getElementById("image")
        const pictureElm = document.getElementById("updatePicture")
        const uploadElm = document.getElementById("upload")
        
        const matchesElm = document.getElementById("teamMatches")
        fetch(`/times/${eventID}/1/${teamID}/html?type=teamMatches`).then(async (res)=>{
            let json = await res.json()
            matchesElm.innerHTML = json.teamMatches
        })

        const lookupButtonElm = document.getElementById("open")
        const lookupValueElm = document.getElementById("lookup")

        let isString = value => typeof value === 'string' || value instanceof String;

        if (localStorage.getItem("url")) {
            lookupValueElm.value = localStorage.getItem("url")
        }

        lookupButtonElm.onclick = () => {
            let url = lookupValueElm.value
            localStorage.setItem("url", url)
            window.open(url.replace("{teamNumber}", "{{teamNumber}}"), '_blank');
        }

        function decodeNumber(number) {
            let layout = [1, 2, 4, 8, 10, 12, 14, 16, 18]; // Add more powers of 2 as needed
            let decodedArray = [];

            for (let i = layout.length - 1; i >= 0; i--) {
                if (number >= layout[i]) {
                    decodedArray.unshift(layout[i]);
                    number -= layout[i];
                }
            }

            return decodedArray;
        }


        let imgURL = `/api/team/data/${eventID}/${teamID}.png`
        imageElm.src = imgURL

        // uploadElm.onclick = () => {
        //     console.log(pictureElm.files)
        //     let file = pictureElm.files[0]
        //     let toSend = new FormData();
        //     toSend.append("file", file);
        //     fetch(`/api/team/upload/${eventID}/${teamID}`, { method: "POST", body: toSend }).then((r) => {
        //         imageElm.src = `${imgURL}?${new Date().getTime()}`
        //         alert("Uploaded image!")
        //     });
        // }

        uploadElm.onclick = () => {
        console.log(pictureElm.files);
        let file = pictureElm.files[0];
        let toSend = new FormData();
        toSend.append("file", file);

        let xhr = new XMLHttpRequest();

        // Update progress bar during the upload
        xhr.upload.addEventListener("progress", (event) => {
            if (event.lengthComputable) {
                let percentComplete = (event.loaded / event.total) * 100;
                progressBar.value = percentComplete;
                progressText.innerText = `${Math.round(percentComplete)}%`;
            }
        });

        // Alert when the upload is complete
        xhr.onload = function () {
            if (xhr.status === 200) {
                imageElm.src = `${imgURL}?${new Date().getTime()}`;
                alert("Uploaded image!");
                progressBar.value = 0; // Reset progress bar
                progressText.innerText = "0%";
            } else {
                alert("Upload failed!");
            }
        };

        // Send the request
        xhr.open("POST", `/api/team/upload/${eventID}/${teamID}`, true);
        xhr.send(toSend);
    };

        skillsElm.onsubmit = (event) => {
            event.preventDefault()
            let subType = event.submitter.value.toLowerCase()
            if (subType == "save") {
                let toSend = {}
                console.log(dataElms)
                for (let key in dataLayout) {
                    if (dataElms[key]) {
                        let val = dataElms[key].checked ?? dataElms[key]?.options?.selectedIndex ?? dataElms[key].value
                        console.log(key, val)
                        toSend[key] = val
                    } else {
                        let count = 0
                        let res = 0
                        for (let keyKey in dataLayout[key]) {
                            count++
                            let elm = dataElms[`${key}_${keyKey}`]
                            if (elm.checked) {
                                res += count ** 1
                            }
                        }
                        toSend[key] = res
                        console.log(key, res)
                    }
                }
                console.log("toSend", toSend)
                fetch(`/api/team/upload/${eventID}/${teamID}`, { method: "POST", body: JSON.stringify(toSend), headers: { "Content-Type": "application/json" } }).then((r) => {
                    alert("Updated data!")
                })
            } else {
                window.location.reload()
            }
        }

        function autoResize() {
            // let elm = teamDataElms.note
            // elm.style.height = 'auto';
            // elm.style.width = 'auto';
            // elm.style.height = elm.scrollHeight + 'px';
            // elm.style.width = elm.scrollWidth +50 + 'px';
            // console.log(elm)
        }

        async function loadData() {
            let dataLayoutResponse = await fetch(`/api/event/${eventID}/layout`)
            dataLayout = await dataLayoutResponse.json()

            let teamDataResponse = await fetch(`/api/team/data/${eventID}/${teamID}`)
            let teamData = await teamDataResponse.json()

            console.log(dataLayout, teamData)

            let before = null

            for (let key in dataLayout) {
                let data = dataLayout[key]

                let dType = typeof data
                if (isString(data)) dType = data.toLowerCase()

                if (before && dataLayout[before]) {
                    let dataBefore = dataLayout[before]
                    console.log("Before", before, dataBefore)
                    if (data != dataBefore) {
                        let hr = document.createElement("hr")
                        dataElm.append(hr)
                    }
                }

                before = key

                switch (dType) {
                    case "boolean": {
                        let label = document.createElement("label")
                        let bool = document.createElement("input")
                        let br = document.createElement("br")
                        label.setAttribute("for", key)
                        label.innerText = `${key}:`
                        bool.id = key
                        bool.type = "checkbox"
                        if (teamData[key]) {
                            bool.setAttribute("checked", true)
                        }
                        dataElms[key] = bool
                        dataElm.append(label, bool, br)
                        break
                    }
                    case "string": {
                        let label = document.createElement("label")
                        let string = document.createElement("textarea")
                        let br = document.createElement("br")
                        let br2 = document.createElement("br")
                        label.setAttribute("for", key)
                        label.innerText = `${key}:`
                        string.id = key
                        string.type = "text"
                        if (teamData[key]) {
                            string.value = teamData[key]
                        }
                        dataElms[key] = string
                        dataElm.append(label, br, string, br2)
                        break
                    }
                    case "number": {
                        let label = document.createElement("label")
                        let num = document.createElement("input")
                        let br = document.createElement("br")
                        let br2 = document.createElement("br")
                        label.setAttribute("for", key)
                        label.innerText = `${key}:`
                        num.id = key
                        num.type = "number"
                        if (teamData[key]) {
                            num.value = teamData[key]
                        }
                        dataElms[key] = num
                        dataElm.append(label, br, num, br2)
                        break
                    }
                    case "object": {
                        if (Array.isArray(data)) {
                            let label = document.createElement("label")
                            let arr = document.createElement("select")
                            let br = document.createElement("br")
                            label.setAttribute("for", key)
                            label.innerText = `${key}:`
                            arr.id = key
                            for (let keyKey of data) {
                                let opt = document.createElement("option")
                                opt.innerText = keyKey
                                opt.id = `${key}_${keyKey}`
                                arr.append(opt)
                            }
                            if (teamData[key]) {
                                arr.options.selectedIndex = teamData[key]
                            }
                            dataElms[key] = arr
                            dataElm.append(label, arr, br)
                        } else {
                            let decoded = decodeNumber(teamData[key])
                            console.log("decode", decoded, teamData[key])
                            let br2 = document.createElement("br")
                            let toAdd = []
                            let c = 0
                            for (let keyKey in data) {
                                c++
                                let objLable = document.createElement("label")
                                let obj = document.createElement("input")
                                let br = document.createElement("br")
                                obj.type = "checkbox"
                                objLable.innerText = `${key} ${keyKey}`
                                dataElms[`${key}_${keyKey}`] = obj
                                if (decoded.includes(c)) {
                                    obj.setAttribute("checked", true)
                                }
                                toAdd.push(objLable, obj, br)
                            }
                            dataElm.append(...toAdd)
                        }
                        break
                    }
                }
            }

            autoResize()

        }
        loadData()

        var coll = document.getElementsByClassName("collapsible");
        var i;

        for (i = 0; i < coll.length; i++) {
            coll[i].addEventListener("click", function () {
                this.classList.toggle("active");
                var content = this.nextElementSibling;
                if (content.style.maxHeight) {
                    content.style.maxHeight = null;
                } else {
                    content.style.maxHeight = content.scrollHeight + "px";
                }
            });
        }
    </script>
</body>

</html>