<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{teamNumber}} - Team</title>
    <link rel="stylesheet" href="/static/style/main.css">
    <script src='/socket.io/socket.io.js'></script>
</head>

<body>
    <h1 id="teamName">{{teamNumber}}</h1>
    <hr>
    <input id="lookup" type="text" style="width: 500px;"
           value="https://www.youtube.com/results?search_query={teamNumber}+high+stakes+vex+vrc">
    <button id="open">Open</button> <a>(Use <b><em>{teamNumber}</em></b> to refer to the team number in the URL)</a>
    <hr>

    <img id="image" alt="Robot" style="height: 500px;" />
    <hr>
    <input type="file" id="updatePicture" /><button id="upload">Upload</button>
    <div id="progressContainer">
        <progress id="progressBar" value="0" max="100"></progress>
        <span id="progressText">0%</span>
    </div>

    <hr>

    <form id="teamForm">

        <div id="data" class="matchHolder"></div>
        <hr>
        <input type="submit" id="save" value="Save"><input type="submit" id="cancel" value="Cancel">
        <p>data is auto saved!</p>
    </form>

    <h1 class="collapsible active">Teams Matches:</h1>
    <div class="content">
        <div id="teamMatches" class="matchHolder">
        </div>
    </div>

    <script defer>
        const socket = io()
        const splitURL = window.location.pathname.split("/")
        const teamID = splitURL.pop()
        splitURL.pop() // remove /team part
        const eventID = splitURL.pop()
        console.log(teamID)

        let divID = 1
        let s = new URLSearchParams(window.location.search)
        if (s.has("div")) divID = s.get("div")

        socket.on("update", (data)=>{
            console.log(data)
            if (data?.teamID == teamID && data?.eventID == eventID && data?.update) {
                for (let type in data.update) {
                    console.log(type, data.update[type])

                    let elm = document.getElementById(type)
                    if (elm.type == "checkbox") {
                        elm.checked = data.update[type]
                    } else {
                        elm.value = data.update[type]
                    }
                    console.log(elm, elm.checked, elm.value)

                }
            }
        })

        function update(event) {
            event.preventDefault()
            let elm = event.target
            // let teamID = elm.get
            console.log("update", elm.value, elm.checked, elm.getAttribute("teamid"), elm.nodeName)

            let toSend = {}
            toSend[elm.id] = elm.value

            if (elm.type == "checkbox") {
                toSend[elm.id] = elm.checked
            }

            console.log(toSend)

            socket.emit("update", {
                teamID: teamID,
                eventID: eventID,
                update: toSend
            })
        }

        let dataLayout = {}
        let dataElms = {}
        let teamData = {}

        const teamFormElm = document.getElementById("teamForm")
        const dataElm = document.getElementById("data")
        const imageElm = document.getElementById("image")
        const pictureElm = document.getElementById("updatePicture")
        const uploadElm = document.getElementById("upload")

        const matchesElm = document.getElementById("teamMatches")
        fetch(`/event/${eventID}/${divID}/html?team=${teamID}&type=teamMatches`).then(async (res) => {
            let json = await res.json()
            matchesElm.innerHTML = json.teamMatches
        })

        const lookupButtonElm = document.getElementById("open")
        const lookupValueElm = document.getElementById("lookup")

        let isString = value => typeof value === 'string' || value instanceof String;

        if (localStorage.getItem("url")) {
            lookupValueElm.value = localStorage.getItem("url")
        }

        lookupButtonElm.onclick = () => {
            let url = lookupValueElm.value
            localStorage.setItem("url", url)
            window.open(url.replace("{teamNumber}", "{{teamNumber}}"), '_blank');
        }

        let imgURL = `/api/team/data/${eventID}/${teamID}.png`
        imageElm.src = imgURL

        // uploadElm.onclick = () => {
        //     console.log(pictureElm.files)
        //     let file = pictureElm.files[0]
        //     let toSend = new FormData();
        //     toSend.append("file", file);
        //     fetch(`/api/team/upload/${eventID}/${teamID}`, { method: "POST", body: toSend }).then((r) => {
        //         imageElm.src = `${imgURL}?${new Date().getTime()}`
        //         alert("Uploaded image!")
        //     });
        // }

        uploadElm.onclick = () => {
            console.log(pictureElm.files);
            let file = pictureElm.files[0];
            let toSend = new FormData();
            toSend.append("file", file);

            let xhr = new XMLHttpRequest();

            // Update progress bar during the upload
            xhr.upload.addEventListener("progress", (event) => {
                if (event.lengthComputable) {
                    let percentComplete = (event.loaded / event.total) * 100;
                    progressBar.value = percentComplete;
                    progressText.innerText = `${Math.round(percentComplete)}%`;
                }
            });

            // Alert when the upload is complete
            xhr.onload = function () {
                if (xhr.status === 200) {
                    imageElm.src = `${imgURL}?${new Date().getTime()}`;
                    alert("Uploaded image!");
                    progressBar.value = 0; // Reset progress bar
                    progressText.innerText = "0%";
                } else {
                    alert("Upload failed!");
                }
            };

            // Send the request
            xhr.open("POST", `/api/team/upload/${eventID}/${teamID}`, true);
            xhr.send(toSend);
        };

        teamFormElm.onsubmit = (event) => {
            event.preventDefault()
            let subType = event.submitter.value.toLowerCase()
            if (subType == "save") {
                let toSend = {}
                for (let key in dataLayout) {
                    for (let elm of dataLayout[key]) {
                        let id = `${key}-${elm.value}`
                        console.log(id, dataElms[id])

                        toSend[id] = dataElms[id]?.value

                        if (inputTypes.includes(elm.type)) {
                            if (dataElms[id]?.type == "checkbox") {
                                toSend[id] = dataElms[id]?.checked
                            }
                        }
                    }
                }
                for (let elm in toSend) {
                    if (teamData[elm] && teamData[elm] === toSend[elm]) {
                        delete toSend[elm] // Remove values that haven't chaneged?
                    }
                }
                console.log(dataElms, dataLayout)
                console.log("toSend", toSend, teamData)
                socket.emit("update", {
                    teamID: teamID,
                    eventID: eventID,
                    update: toSend
                })
                fetch(`/api/team/upload/${eventID}/${teamID}`, { method: "POST", body: JSON.stringify(toSend), headers: { "Content-Type": "application/json" } }).then((r) => {
                    alert("Updated data!")
                })
            } else {
                window.location.reload()
            }
        }

        function autoResize() {
            // let elm = teamDataElms.note
            // elm.style.height = 'auto';
            // elm.style.width = 'auto';
            // elm.style.height = elm.scrollHeight + 'px';
            // elm.style.width = elm.scrollWidth +50 + 'px';
            // console.log(elm)
        }

        const inputTypes = ["checkbox", "text", "number", "range"]

        async function loadData() {
            let dataLayoutResponse = await fetch(`/api/event/${eventID}/layout`)
            dataLayout = await dataLayoutResponse.json()

            let teamDataResponse = await fetch(`/api/team/data/${eventID}/${teamID}`)
            teamData = await teamDataResponse.json()

            console.log(dataLayout, teamData)

            let before = null

            for (let key in dataLayout) {
                console.log(key, dataLayout[key])

                let keyDiv = document.createElement("div")
                let keyName = document.createElement("h1")
                keyName.innerText = `${key}`

                keyDiv.classList.add("dataThing")
                keyDiv.append(keyName)

                for (let elm of dataLayout[key]) {
                    console.log("key elm",key, elm)
                    let inputDiv = document.createElement("div")
                    inputDiv.id = `${key}-div-${elm.value}`
                    let inputName = document.createElement("lable")
                    inputName.innerText = `${elm.name}: `
                    inputDiv.append(inputName)

                    if (inputTypes.includes(elm.type)) {
                        let input = document.createElement("input")
                        input.type = elm.type
                        input.id = `${key}-${elm.value}`
                        if (input.id in teamData) {
                            if (elm.type == "checkbox") {
                                input.checked = teamData[input.id]
                            } else {
                                input.value = teamData[input.id]
                            }
                        }
                        dataElms[input.id] = input
                        inputDiv.append(input)
                        input.onchange = update
                    } else if (elm.type == "textbox") {
                        let input = document.createElement("textarea")
                        input.id = `${key}-${elm.value}`

                        dataElms[input.id] = input

                        if (input.id in teamData) {
                            input.value = teamData[input.id]
                        }

                        let br = document.createElement("br")
                        inputDiv.append(br,input)
                        input.onchange = update
                    } else if (elm.type == "select") {
                        let input = document.createElement("select")
                        input.id = `${key}-${elm.value}`

                        for (let item of elm.values) {
                            let option = document.createElement("option")
                            option.value = `${key}-${elm.name}-${item.value}`
                            option.innerText = item.name

                            if (input.id in teamData) {
                                if (teamData[input.id] == option.value) {
                                    option.selected = true
                                }
                            }

                            input.append(option)
                        }
                        dataElms[input.id] = input

                        inputDiv.append(input)
                        input.onchange = update
                    }
                    
                    
                    keyDiv.append(inputDiv)
                }
                let br = ""//document.createElement("hr")
                dataElm.append(keyDiv, br)
            }
            // alert("Loaded data!")
        }
        loadData()

        var coll = document.getElementsByClassName("collapsible");
        var i;

        for (i = 0; i < coll.length; i++) {
            coll[i].addEventListener("click", function () {
                this.classList.toggle("active");
                var content = this.nextElementSibling;
                if (content.style.maxHeight) {
                    content.style.maxHeight = null;
                } else {
                    content.style.maxHeight = content.scrollHeight + "px";
                }
            });
        }
    </script>
</body>

</html>